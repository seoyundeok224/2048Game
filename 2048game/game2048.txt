<!DOCTYPE html>
<html lang="en"> <!-- 문서의 언어를 영어로 설정 -->
<head>
  <meta charset="UTF-8" /> <!-- 문자 인코딩을 UTF-8로 설정 -->
  <meta name="viewport" content="width=device-width, initial-scale=1" /> <!-- 모바일 대응 뷰포트 설정 -->
  <title>2048 게임</title> <!-- 브라우저 탭에 표시될 제목 -->
  
  <!-- 내부 스타일 (CSS) 정의 -->
  <style>
    /* body를 flex 컨테이너로 설정하여 세로 방향 정렬 및 가운데 정렬 */
    body {
      display: flex; /* flexbox 레이아웃 사용 */
      flex-direction: column; /* 세로 방향으로 정렬 */
      align-items: center; /* 가로 방향 가운데 정렬 */
      justify-content: flex-start; /* 위에서부터 내용 배치 */
      min-height: 100vh; /* 화면 높이를 100%로 설정 */
      margin: 0; /* 기본 마진 제거 */
      font-family: Arial, sans-serif; /* 폰트 스타일 설정 */
    }

    /* 제목 스타일 */
    h3 {
      text-align: center; /* 텍스트 가운데 정렬 */
      margin-top: 20px; /* 위쪽 마진 설정 */
    }

    /* 점수 표시 영역 스타일 */
    #score {
      font-size: 24px; /* 글자 크기 설정 */
      margin-bottom: 10px; /* 아래쪽 마진 설정 */
      text-align: center; /* 텍스트 가운데 정렬 */
      width: 200px; /* 고정된 너비 설정 */
    }

    /* 게임 보드 영역 스타일 */
    #game-board {
      margin: 0 auto; /* 중앙 정렬 */
      width: max-content; /* 내용에 맞게 너비 조정 */
      display: flex; /* flexbox 레이아웃 사용 */
      flex-direction: column; /* 세로 방향으로 배치 */
      align-items: center; /* 가로 방향 가운데 정렬 */
    }

    /* 버튼 스타일 */
    button {
      margin: 10px auto; /* 위아래 마진 설정, 가운데 정렬 */
      display: block; /* block 요소로 설정 */
      padding: 8px 16px; /* 버튼 안의 여백 설정 */
      font-size: 16px; /* 글자 크기 설정 */
      cursor: pointer; /* 마우스 커서가 손 모양으로 변경 */
    }

    /* 설명 문단 스타일 */
    p {
      max-width: 400px; /* 최대 너비 설정 */
      text-align: center; /* 텍스트 가운데 정렬 */
      line-height: 1.5; /* 줄 간격 설정 */
      margin: 20px auto; /* 위아래 마진 설정, 가운데 정렬 */
    }
  </style>
</head>

<body>
  <!-- 게임 제목 -->
  <h3>2048 게임</h3>

  <!-- 현재 점수 표시 -->
  <div id="score">0</div>

  <!-- 게임 보드가 생성될 영역 -->
  <div id="game-board"></div>

  <!-- 리셋 버튼 -->
  <button onclick="reset2048()">리셋</button>

  <!-- 게임 설명 -->
  <h3>게임 설명</h3>
  <p>
    - 2048 게임은 숫자를 합쳐서 2048을 만드는 퍼즐 게임입니다.<br />
    - 게임은 4x4 격자판에서 진행되며, 같은 숫자를 가진 타일을 합쳐 새로운 숫자를 만듭니다.<br />
    - 사용자는 상하좌우로 타일을 이동시켜 숫자를 합칠 수 있습니다.<br />
    - 목표는 가능한 한 높은 점수를 얻고 2048 타일을 만드는 것입니다.<br />
    - 2048 게임은 중독성이 강하고, 짧은 시간 안에 즐길 수 있는 재미있는 퍼즐 게임입니다.<br />
  </p>

  <!-- JavaScript 코드 (게임 로직) -->
  <script>
    // 2048 게임 보드 크기 설정 (4x4)
    const size = 4;

    // 게임 상태 변수들
    let board = Array.from({ length: size }, () => Array(size).fill(0)); // 보드 배열 초기화
    let score = 0;          // 현재 점수
    let history = [];       // Undo 기능을 위한 이전 상태 저장

    // 숫자별 배경색 매핑
    const colorMap = {
      2: '#eee4da', 4: '#ede0c8', 8: '#f2b179',
      16: '#f59563', 32: '#f67c5f', 64: '#f65e3b',
      128: '#edcf72', 256: '#edcc61', 512: '#edc850',
      1024: '#edc53f', 2048: '#edc22e'
    };

    // 빈 칸 중 하나에 2 또는 4를 랜덤으로 추가하는 함수
    function addRandomTile() {
      const empty = []; // 빈 칸 위치를 저장할 배열
      for (let r = 0; r < size; r++) {
        for (let c = 0; c < size; c++) {
          if (board[r][c] === 0) empty.push([r, c]); // 값이 0인 경우 빈 칸 저장
        }
      }

      if (empty.length === 0) return; // 빈 칸이 없으면 종료
      const [r, c] = empty[Math.floor(Math.random() * empty.length)]; // 랜덤 위치 선택
      board[r][c] = Math.random() < 0.9 ? 2 : 4; // 90% 확률로 2, 10% 확률로 4 생성
    }

    // 보드를 HTML 화면에 그리는 함수
    function drawBoard() {
      const boardDiv = document.getElementById('game-board'); // 보드 컨테이너
      const scoreSpan = document.getElementById('score');     // 점수 표시 영역
      if (!boardDiv) return;

      boardDiv.innerHTML = ''; // 이전 내용 초기화

      board.forEach(row => {
        const rowDiv = document.createElement('div'); // 행 요소 생성
        rowDiv.style.display = 'flex'; // 가로 방향 배치

        row.forEach(cell => {
          const cellDiv = document.createElement('div'); // 셀 요소 생성
          cellDiv.textContent = cell === 0 ? '' : cell; // 값이 0이면 비우기

          // 셀 스타일 적용
          Object.assign(cellDiv.style, {
            width: '60px', height: '60px', margin: '5px',
            border: '2px solid black', borderRadius: '10px',
            background: colorMap[cell] || '#ffffff',
            display: 'flex', alignItems: 'center',
            justifyContent: 'center', fontSize: '1em',
            fontWeight: 'bold', color: (cell <= 4) ? '#776e65' : '#fff'
          });

          rowDiv.appendChild(cellDiv); // 행에 셀 추가
        });

        boardDiv.appendChild(rowDiv); // 보드에 행 추가
      });

      if (scoreSpan) scoreSpan.textContent = score; // 점수 표시 업데이트
    }

    // 한 줄을 왼쪽으로 밀고 합치는 함수
    function slide(row) {
      let arr = row.filter(v => v); // 0을 제외한 숫자만 추출

      for (let i = 0; i < arr.length - 1; i++) {
        if (arr[i] === arr[i + 1]) {
          arr[i] *= 2;             // 같은 숫자면 합치기
          score += arr[i];         // 점수 증가
          arr[i + 1] = 0;          // 다음 칸은 0으로 설정
        }
      }

      arr = arr.filter(v => v);    // 다시 0 제거
      while (arr.length < size) arr.push(0); // 오른쪽에 0 채우기
      return arr;
    }

    // 2차원 배열을 왼쪽으로 90도 회전 (상하좌우 이동을 위한 보조 함수)
    function rotateLeft(mat) {
      return mat[0].map((_, i) => mat.map(row => row[size - 1 - i]));
    }

    // 보드를 방향에 따라 이동시키는 함수
    function move(dir) {
      const old = JSON.stringify(board); // 이동 전 보드 상태 저장 (비교용)
      history.push(JSON.stringify({ board, score })); // undo용 상태 저장

      // 회전으로 방향 처리 (0: 좌, 1: 상, 2: 우, 3: 하)
      for (let i = 0; i < dir; i++) board = rotateLeft(board);
      board = board.map(slide); // 각 행을 왼쪽으로 슬라이드
      for (let i = 0; i < (4 - dir) % 4; i++) board = rotateLeft(board); // 원래 방향으로 되돌림

      if (JSON.stringify(board) !== old) {
        addRandomTile();     // 보드가 바뀐 경우 새 타일 추가
        drawBoard();         // 화면 다시 그림
        if (checkWin()) {
          alert("축하합니다! 2048을 달성했습니다!");
        } else if (isGameOver()) {
          alert("게임 오버! 더 이상 이동할 수 없습니다.");
        }
      } else {
        history.pop(); // 보드가 안 바뀌었으면 undo 기록 제거
      }
    }

    // 이동 가능한 타일이 없고 빈 칸도 없으면 게임 오버
    function isGameOver() {
      for (let r = 0; r < size; r++) {
        for (let c = 0; c < size; c++) {
          if (board[r][c] === 0) return false; // 빈 칸이 있으면 게임 오버 아님
        }
      }

      for (let r = 0; r < size; r++) {
        for (let c = 0; c < size - 1; c++) {
          if (board[r][c] === board[r][c + 1] || board[c][r] === board[c + 1][r]) {
            return false; // 옆이나 아래에 같은 숫자가 있으면 게임 오버 아님
          }
        }
      }

      return true; // 이동할 곳이 없으면 게임 오버
    }

    // 2048 타일을 만들었는지 체크하는 함수
    function checkWin() {
      return board.some(row => row.includes(2048)); // 2048이 있으면 승리
    }

    // 방향에 따른 키 이벤트 처리
    window.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowUp') move(1); // 위 방향키
      if (e.key === 'ArrowDown') move(3); // 아래 방향키
      if (e.key === 'ArrowLeft') move(0); // 왼쪽 방향키
      if (e.key === 'ArrowRight') move(2); // 오른쪽 방향키
    });

    // 게임 리셋 함수
    function reset2048() {
      board = Array.from({ length: size }, () => Array(size).fill(0)); // 보드 초기화
      score = 0; // 점수 초기화
      addRandomTile(); // 새 타일 추가
      addRandomTile(); // 새 타일 추가
      drawBoard(); // 보드 그리기
    }

    // 페이지가 로드될 때 초기화
    reset2048(); // 게임 시작 시 초기화
  </script>
</body>
</html>